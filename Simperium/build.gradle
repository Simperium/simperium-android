plugins {
    id "com.android.library"
    id "maven-publish"
    id "com.automattic.android.publish-to-s3"
}

repositories {
    google()
    jcenter()
}

android {
    compileSdkVersion 30

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 30

        // Calculating PIN for certificate: OU=Domain Control Validated, CN=*.simperium.com
        // Pin Value: e25695097d04927c9d90206333a687a7b1f99708
        buildConfigField 'String', 'SIMPERIUM_COM_SPKI', '"e25695097d04927c9d90206333a687a7b1f99708"'
    }

    defaultPublishConfig 'clientRelease'

    dependencies {
        androidTestImplementation 'androidx.test:core:1.2.0'
        androidTestImplementation 'androidx.test:runner:1.2.0'

        implementation 'androidx.appcompat:appcompat:1.0.2'
        implementation 'com.google.android.material:material:1.1.0-alpha07'
        implementation 'com.google.code.gson:gson:2.8.5'
        implementation 'com.koushikdutta.async:androidasync:3.1.0'
        implementation 'org.thoughtcrime.ssl.pinning:AndroidPinning:1.0.0'
    }

    flavorDimensions "main"

    productFlavors {
        // client is the main production build
        client {
            dimension "main"
        }

        // support build is for running tests and includes mock code
        support {
            dimension "main"
        }
    }

    useLibrary 'android.test.base'
    useLibrary 'android.test.runner'
    useLibrary 'org.apache.http.legacy'
}

tasks.withType(Javadoc) {
    options.addStringOption('Xdoclint:none', '-quiet')
    options.addStringOption('encoding', 'UTF-8')
}

afterEvaluate {
    publishing {
        publications {
            release(MavenPublication) {
                from components.clientRelease
                groupId "com.automattic"
                artifactId "simperium"
                // version is set by 'publish-to-s3' plugin
            }
        }
    }
}

publishToS3Plugin {
    mavenPublishGroupId "com.automattic"
    mavenPublishArtifactId "simperium"
}

task versionConfig(group: "build", description: "Generate version class") {
    def dir = "${buildDir}/generated/source/version"
    def file = new File(dir, "com/simperium/Version.java")

    android.sourceSets.main.java.srcDir dir

    doLast {
        def publishedVersion = project.ext.properties.extra_version_name
        def describe = gitDescribe()

        logger.info "Version: ${describe}"

        file.getParentFile().mkdirs()
        def writer = new FileWriter(file)
        writer.write("""/* auto-generated file do not modify */
package com.simperium;
public final class Version {
    public static final String LIBRARY_NAME = "android";
    public static final String NAME = "android-$publishedVersion";
    /* project.version */
    public static final String NUMBER = "$publishedVersion";
    /* git rev-parse --short --verify HEAD */
    public static final String BUILD = "${gitHash()}";
    /* git describe --always --dirty=-dirty */
    public static final String DESCRIBE = "${gitDescribe()}";
}
""")
        writer.close()
    }
}

tasks.preBuild.dependsOn versionConfig
