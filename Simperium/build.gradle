
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies { classpath 'com.android.tools.build:gradle:0.6.+' }
}

apply plugin: 'android-library'
apply plugin: 'maven'

group "com.simperium"

repositories {
    mavenCentral()
    maven { url "http://simperium.github.io/simperium-android" }
}

dependencies {
    compile 'com.android:volley:2.2'
    compile 'com.loopj:android-async-http:1.4.3'
    compile 'com.codebutler:android-websockets:6c7c60d'
}

android {

    compileSdkVersion 19
    buildToolsVersion "19"

    defaultConfig {
        minSdkVersion 8
        targetSdkVersion 19
    }

    sourceSets {

        debug {
            java {
                srcDir 'src/support/java'
            }
        }

    }


}

def gitHash = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-parse', '--verify', '--short', 'HEAD'
            standardOutput = code
        }
        return code.toString().trim()
    }
    catch (ignored) {
        return "<unknown>";
    }
}

def gitDescribe = { ->
    try {
        def code = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--always', '--dirty=-dirty'
            standardOutput = code
        }
        return code.toString().trim()
    }
    catch (ignored) {
        return "<unknown>"
    }
}

def gitVersion = { ->
    (gitDescribe() =~ /^v/).replaceFirst('')
}

version gitVersion()

task versionConfig(group: "build", description: "Generate version class") {
    def dir = "${buildDir}/source/version"
    def file = new File(dir, "com/simperium/Version.java")

    android.sourceSets.main.java.srcDir dir

    doLast {
        def describe = gitDescribe()

        logger.info "Version: ${describe}"

        file.getParentFile().mkdirs()
        def writer = new FileWriter(file)
        writer.write("""/* auto-generated file do not modify */
package com.simperium;

public final class Version {

    public static final String NAME = "android-${project.version}";

    /* project.version */
    public static final String NUMBER = "${project.version}";

    /* git rev-parse --short --verify HEAD */
    public static final String BUILD = "${gitHash()}";

    /* git describe --always --dirty=-dirty */
    public static final String DESCRIBE = "${gitDescribe()}";
}
""")
        writer.close()
    }
}

tasks.preBuild.dependsOn versionConfig

task writePom << {
    def dir = "${buildDir}/pom"
    ["simperium-android", "simperium-android-support"].each() { artifact ->
        def file = new File(dir, "${artifact}.xml")
        file.getParentFile().mkdirs()
        pom {
            project {
                artifactId artifact
                packaging "aar"
            }
        }.writeTo(file)
    }
}

task publishArtifacts {
    def libDir = "${buildDir}/libs"
    def pomDir = "${buildDir}/pom"
    def baseName = "${project.name}-${project.version}"
    def artifacts = [:]
    artifacts[(new File(pomDir, "simperium-android.xml"))] =
        new File(libDir, "${baseName}.aar")
    artifacts[(new File(pomDir, "simperium-android-support.xml"))] =
        new File(libDir, "${baseName}-debug.aar")

    doLast {
        if (!project.hasProperty("repository"))
            throw new InvalidUserDataException("Project has no repository configured")

        artifacts.each() { pomFile, file ->
            exec {
                commandLine "mvn", "deploy:deploy-file", "-Dfile=${file}",
                    "-DpomFile=${pomFile}", "-Durl=${project.repository}"
                standardOutput = new ByteArrayOutputStream()
                
            }
        }
    }
}

tasks.publishArtifacts.dependsOn tasks.assemble
tasks.publishArtifacts.dependsOn tasks.writePom